{"version":3,"file":"lit-video.6fc33520.js","sources":["../../node_modules/lit-video/node_modules/lit-html/lib/directive.js","../../node_modules/lit-video/node_modules/lit-html/lib/dom.js","../../node_modules/lit-video/node_modules/lit-html/lib/part.js","../../node_modules/lit-video/node_modules/lit-html/lib/template.js","../../node_modules/lit-video/node_modules/lit-html/lib/template-instance.js","../../node_modules/lit-video/node_modules/lit-html/lib/template-result.js","../../node_modules/lit-video/node_modules/lit-html/lib/parts.js","../../node_modules/lit-video/node_modules/lit-html/lib/default-template-processor.js","../../node_modules/lit-video/node_modules/lit-html/lib/template-factory.js","../../node_modules/lit-video/node_modules/lit-html/lib/render.js","../../node_modules/lit-video/node_modules/lit-html/lit-html.js","../../node_modules/lit-video/node_modules/lit-html/lib/modify-template.js","../../node_modules/lit-video/node_modules/lit-html/lib/shady-render.js","../../node_modules/lit-video/node_modules/lit-element/lib/updating-element.js","../../node_modules/lit-video/node_modules/lit-element/lib/css-tag.js","../../node_modules/lit-video/node_modules/lit-element/lit-element.js","../../node_modules/lit-video/lit-video-html.js","../../node_modules/lit-video/lit-video-styles.js","../../node_modules/lit-video/lit-video.js"],"sourcesContent":["/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nconst directives = new WeakMap();\n/**\n * Brands a function as a directive factory function so that lit-html will call\n * the function during template rendering, rather than passing as a value.\n *\n * A _directive_ is a function that takes a Part as an argument. It has the\n * signature: `(part: Part) => void`.\n *\n * A directive _factory_ is a function that takes arguments for data and\n * configuration and returns a directive. Users of directive usually refer to\n * the directive factory as the directive. For example, \"The repeat directive\".\n *\n * Usually a template author will invoke a directive factory in their template\n * with relevant arguments, which will then return a directive function.\n *\n * Here's an example of using the `repeat()` directive factory that takes an\n * array and a function to render an item:\n *\n * ```js\n * html`<ul><${repeat(items, (item) => html`<li>${item}</li>`)}</ul>`\n * ```\n *\n * When `repeat` is invoked, it returns a directive function that closes over\n * `items` and the template function. When the outer template is rendered, the\n * return directive function is called with the Part for the expression.\n * `repeat` then performs it's custom logic to render multiple items.\n *\n * @param f The directive factory function. Must be a function that returns a\n * function of the signature `(part: Part) => void`. The returned function will\n * be called with the part object.\n *\n * @example\n *\n * import {directive, html} from 'lit-html';\n *\n * const immutable = directive((v) => (part) => {\n *   if (part.value !== v) {\n *     part.setValue(v)\n *   }\n * });\n */\nexport const directive = (f) => ((...args) => {\n    const d = f(...args);\n    directives.set(d, true);\n    return d;\n});\nexport const isDirective = (o) => {\n    return typeof o === 'function' && directives.has(o);\n};\n//# sourceMappingURL=directive.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * True if the custom elements polyfill is in use.\n */\nexport const isCEPolyfill = typeof window !== 'undefined' &&\n    window.customElements != null &&\n    window.customElements.polyfillWrapFlushCallback !==\n        undefined;\n/**\n * Reparents nodes, starting from `start` (inclusive) to `end` (exclusive),\n * into another container (could be the same container), before `before`. If\n * `before` is null, it appends the nodes to the container.\n */\nexport const reparentNodes = (container, start, end = null, before = null) => {\n    while (start !== end) {\n        const n = start.nextSibling;\n        container.insertBefore(start, before);\n        start = n;\n    }\n};\n/**\n * Removes nodes, starting from `start` (inclusive) to `end` (exclusive), from\n * `container`.\n */\nexport const removeNodes = (container, start, end = null) => {\n    while (start !== end) {\n        const n = start.nextSibling;\n        container.removeChild(start);\n        start = n;\n    }\n};\n//# sourceMappingURL=dom.js.map","/**\n * @license\n * Copyright (c) 2018 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * A sentinel value that signals that a value was handled by a directive and\n * should not be written to the DOM.\n */\nexport const noChange = {};\n/**\n * A sentinel value that signals a NodePart to fully clear its content.\n */\nexport const nothing = {};\n//# sourceMappingURL=part.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * An expression marker with embedded unique key to avoid collision with\n * possible text in templates.\n */\nexport const marker = `{{lit-${String(Math.random()).slice(2)}}}`;\n/**\n * An expression marker used text-positions, multi-binding attributes, and\n * attributes with markup-like text values.\n */\nexport const nodeMarker = `<!--${marker}-->`;\nexport const markerRegex = new RegExp(`${marker}|${nodeMarker}`);\n/**\n * Suffix appended to all bound attribute names.\n */\nexport const boundAttributeSuffix = '$lit$';\n/**\n * An updatable Template that tracks the location of dynamic parts.\n */\nexport class Template {\n    constructor(result, element) {\n        this.parts = [];\n        this.element = element;\n        const nodesToRemove = [];\n        const stack = [];\n        // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n        const walker = document.createTreeWalker(element.content, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);\n        // Keeps track of the last index associated with a part. We try to delete\n        // unnecessary nodes, but we never want to associate two different parts\n        // to the same index. They must have a constant node between.\n        let lastPartIndex = 0;\n        let index = -1;\n        let partIndex = 0;\n        const { strings, values: { length } } = result;\n        while (partIndex < length) {\n            const node = walker.nextNode();\n            if (node === null) {\n                // We've exhausted the content inside a nested template element.\n                // Because we still have parts (the outer for-loop), we know:\n                // - There is a template in the stack\n                // - The walker will find a nextNode outside the template\n                walker.currentNode = stack.pop();\n                continue;\n            }\n            index++;\n            if (node.nodeType === 1 /* Node.ELEMENT_NODE */) {\n                if (node.hasAttributes()) {\n                    const attributes = node.attributes;\n                    const { length } = attributes;\n                    // Per\n                    // https://developer.mozilla.org/en-US/docs/Web/API/NamedNodeMap,\n                    // attributes are not guaranteed to be returned in document order.\n                    // In particular, Edge/IE can return them out of order, so we cannot\n                    // assume a correspondence between part index and attribute index.\n                    let count = 0;\n                    for (let i = 0; i < length; i++) {\n                        if (endsWith(attributes[i].name, boundAttributeSuffix)) {\n                            count++;\n                        }\n                    }\n                    while (count-- > 0) {\n                        // Get the template literal section leading up to the first\n                        // expression in this attribute\n                        const stringForPart = strings[partIndex];\n                        // Find the attribute name\n                        const name = lastAttributeNameRegex.exec(stringForPart)[2];\n                        // Find the corresponding attribute\n                        // All bound attributes have had a suffix added in\n                        // TemplateResult#getHTML to opt out of special attribute\n                        // handling. To look up the attribute value we also need to add\n                        // the suffix.\n                        const attributeLookupName = name.toLowerCase() + boundAttributeSuffix;\n                        const attributeValue = node.getAttribute(attributeLookupName);\n                        node.removeAttribute(attributeLookupName);\n                        const statics = attributeValue.split(markerRegex);\n                        this.parts.push({ type: 'attribute', index, name, strings: statics });\n                        partIndex += statics.length - 1;\n                    }\n                }\n                if (node.tagName === 'TEMPLATE') {\n                    stack.push(node);\n                    walker.currentNode = node.content;\n                }\n            }\n            else if (node.nodeType === 3 /* Node.TEXT_NODE */) {\n                const data = node.data;\n                if (data.indexOf(marker) >= 0) {\n                    const parent = node.parentNode;\n                    const strings = data.split(markerRegex);\n                    const lastIndex = strings.length - 1;\n                    // Generate a new text node for each literal section\n                    // These nodes are also used as the markers for node parts\n                    for (let i = 0; i < lastIndex; i++) {\n                        let insert;\n                        let s = strings[i];\n                        if (s === '') {\n                            insert = createMarker();\n                        }\n                        else {\n                            const match = lastAttributeNameRegex.exec(s);\n                            if (match !== null && endsWith(match[2], boundAttributeSuffix)) {\n                                s = s.slice(0, match.index) + match[1] +\n                                    match[2].slice(0, -boundAttributeSuffix.length) + match[3];\n                            }\n                            insert = document.createTextNode(s);\n                        }\n                        parent.insertBefore(insert, node);\n                        this.parts.push({ type: 'node', index: ++index });\n                    }\n                    // If there's no text, we must insert a comment to mark our place.\n                    // Else, we can trust it will stick around after cloning.\n                    if (strings[lastIndex] === '') {\n                        parent.insertBefore(createMarker(), node);\n                        nodesToRemove.push(node);\n                    }\n                    else {\n                        node.data = strings[lastIndex];\n                    }\n                    // We have a part for each match found\n                    partIndex += lastIndex;\n                }\n            }\n            else if (node.nodeType === 8 /* Node.COMMENT_NODE */) {\n                if (node.data === marker) {\n                    const parent = node.parentNode;\n                    // Add a new marker node to be the startNode of the Part if any of\n                    // the following are true:\n                    //  * We don't have a previousSibling\n                    //  * The previousSibling is already the start of a previous part\n                    if (node.previousSibling === null || index === lastPartIndex) {\n                        index++;\n                        parent.insertBefore(createMarker(), node);\n                    }\n                    lastPartIndex = index;\n                    this.parts.push({ type: 'node', index });\n                    // If we don't have a nextSibling, keep this node so we have an end.\n                    // Else, we can remove it to save future costs.\n                    if (node.nextSibling === null) {\n                        node.data = '';\n                    }\n                    else {\n                        nodesToRemove.push(node);\n                        index--;\n                    }\n                    partIndex++;\n                }\n                else {\n                    let i = -1;\n                    while ((i = node.data.indexOf(marker, i + 1)) !== -1) {\n                        // Comment node has a binding marker inside, make an inactive part\n                        // The binding won't work, but subsequent bindings will\n                        // TODO (justinfagnani): consider whether it's even worth it to\n                        // make bindings in comments work\n                        this.parts.push({ type: 'node', index: -1 });\n                        partIndex++;\n                    }\n                }\n            }\n        }\n        // Remove text binding nodes after the walk to not disturb the TreeWalker\n        for (const n of nodesToRemove) {\n            n.parentNode.removeChild(n);\n        }\n    }\n}\nconst endsWith = (str, suffix) => {\n    const index = str.length - suffix.length;\n    return index >= 0 && str.slice(index) === suffix;\n};\nexport const isTemplatePartActive = (part) => part.index !== -1;\n// Allows `document.createComment('')` to be renamed for a\n// small manual size-savings.\nexport const createMarker = () => document.createComment('');\n/**\n * This regex extracts the attribute name preceding an attribute-position\n * expression. It does this by matching the syntax allowed for attributes\n * against the string literal directly preceding the expression, assuming that\n * the expression is in an attribute-value position.\n *\n * See attributes in the HTML spec:\n * https://www.w3.org/TR/html5/syntax.html#elements-attributes\n *\n * \" \\x09\\x0a\\x0c\\x0d\" are HTML space characters:\n * https://www.w3.org/TR/html5/infrastructure.html#space-characters\n *\n * \"\\0-\\x1F\\x7F-\\x9F\" are Unicode control characters, which includes every\n * space character except \" \".\n *\n * So an attribute is:\n *  * The name: any character except a control character, space character, ('),\n *    (\"), \">\", \"=\", or \"/\"\n *  * Followed by zero or more space characters\n *  * Followed by \"=\"\n *  * Followed by zero or more space characters\n *  * Followed by:\n *    * Any character except space, ('), (\"), \"<\", \">\", \"=\", (`), or\n *    * (\") then any non-(\"), or\n *    * (') then any non-(')\n */\nexport const lastAttributeNameRegex = \n// eslint-disable-next-line no-control-regex\n/([ \\x09\\x0a\\x0c\\x0d])([^\\0-\\x1F\\x7F-\\x9F \"'>=/]+)([ \\x09\\x0a\\x0c\\x0d]*=[ \\x09\\x0a\\x0c\\x0d]*(?:[^ \\x09\\x0a\\x0c\\x0d\"'`<>=]*|\"[^\"]*|'[^']*))$/;\n//# sourceMappingURL=template.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { isCEPolyfill } from './dom.js';\nimport { isTemplatePartActive } from './template.js';\n/**\n * An instance of a `Template` that can be attached to the DOM and updated\n * with new values.\n */\nexport class TemplateInstance {\n    constructor(template, processor, options) {\n        this.__parts = [];\n        this.template = template;\n        this.processor = processor;\n        this.options = options;\n    }\n    update(values) {\n        let i = 0;\n        for (const part of this.__parts) {\n            if (part !== undefined) {\n                part.setValue(values[i]);\n            }\n            i++;\n        }\n        for (const part of this.__parts) {\n            if (part !== undefined) {\n                part.commit();\n            }\n        }\n    }\n    _clone() {\n        // There are a number of steps in the lifecycle of a template instance's\n        // DOM fragment:\n        //  1. Clone - create the instance fragment\n        //  2. Adopt - adopt into the main document\n        //  3. Process - find part markers and create parts\n        //  4. Upgrade - upgrade custom elements\n        //  5. Update - set node, attribute, property, etc., values\n        //  6. Connect - connect to the document. Optional and outside of this\n        //     method.\n        //\n        // We have a few constraints on the ordering of these steps:\n        //  * We need to upgrade before updating, so that property values will pass\n        //    through any property setters.\n        //  * We would like to process before upgrading so that we're sure that the\n        //    cloned fragment is inert and not disturbed by self-modifying DOM.\n        //  * We want custom elements to upgrade even in disconnected fragments.\n        //\n        // Given these constraints, with full custom elements support we would\n        // prefer the order: Clone, Process, Adopt, Upgrade, Update, Connect\n        //\n        // But Safari does not implement CustomElementRegistry#upgrade, so we\n        // can not implement that order and still have upgrade-before-update and\n        // upgrade disconnected fragments. So we instead sacrifice the\n        // process-before-upgrade constraint, since in Custom Elements v1 elements\n        // must not modify their light DOM in the constructor. We still have issues\n        // when co-existing with CEv0 elements like Polymer 1, and with polyfills\n        // that don't strictly adhere to the no-modification rule because shadow\n        // DOM, which may be created in the constructor, is emulated by being placed\n        // in the light DOM.\n        //\n        // The resulting order is on native is: Clone, Adopt, Upgrade, Process,\n        // Update, Connect. document.importNode() performs Clone, Adopt, and Upgrade\n        // in one step.\n        //\n        // The Custom Elements v1 polyfill supports upgrade(), so the order when\n        // polyfilled is the more ideal: Clone, Process, Adopt, Upgrade, Update,\n        // Connect.\n        const fragment = isCEPolyfill ?\n            this.template.element.content.cloneNode(true) :\n            document.importNode(this.template.element.content, true);\n        const stack = [];\n        const parts = this.template.parts;\n        // Edge needs all 4 parameters present; IE11 needs 3rd parameter to be null\n        const walker = document.createTreeWalker(fragment, 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */, null, false);\n        let partIndex = 0;\n        let nodeIndex = 0;\n        let part;\n        let node = walker.nextNode();\n        // Loop through all the nodes and parts of a template\n        while (partIndex < parts.length) {\n            part = parts[partIndex];\n            if (!isTemplatePartActive(part)) {\n                this.__parts.push(undefined);\n                partIndex++;\n                continue;\n            }\n            // Progress the tree walker until we find our next part's node.\n            // Note that multiple parts may share the same node (attribute parts\n            // on a single element), so this loop may not run at all.\n            while (nodeIndex < part.index) {\n                nodeIndex++;\n                if (node.nodeName === 'TEMPLATE') {\n                    stack.push(node);\n                    walker.currentNode = node.content;\n                }\n                if ((node = walker.nextNode()) === null) {\n                    // We've exhausted the content inside a nested template element.\n                    // Because we still have parts (the outer for-loop), we know:\n                    // - There is a template in the stack\n                    // - The walker will find a nextNode outside the template\n                    walker.currentNode = stack.pop();\n                    node = walker.nextNode();\n                }\n            }\n            // We've arrived at our part's node.\n            if (part.type === 'node') {\n                const part = this.processor.handleTextExpression(this.options);\n                part.insertAfterNode(node.previousSibling);\n                this.__parts.push(part);\n            }\n            else {\n                this.__parts.push(...this.processor.handleAttributeExpressions(node, part.name, part.strings, this.options));\n            }\n            partIndex++;\n        }\n        if (isCEPolyfill) {\n            document.adoptNode(fragment);\n            customElements.upgrade(fragment);\n        }\n        return fragment;\n    }\n}\n//# sourceMappingURL=template-instance.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * @module lit-html\n */\nimport { reparentNodes } from './dom.js';\nimport { boundAttributeSuffix, lastAttributeNameRegex, marker, nodeMarker } from './template.js';\n/**\n * Our TrustedTypePolicy for HTML which is declared using the html template\n * tag function.\n *\n * That HTML is a developer-authored constant, and is parsed with innerHTML\n * before any untrusted expressions have been mixed in. Therefor it is\n * considered safe by construction.\n */\nconst policy = window.trustedTypes &&\n    trustedTypes.createPolicy('lit-html', { createHTML: (s) => s });\nconst commentMarker = ` ${marker} `;\n/**\n * The return type of `html`, which holds a Template and the values from\n * interpolated expressions.\n */\nexport class TemplateResult {\n    constructor(strings, values, type, processor) {\n        this.strings = strings;\n        this.values = values;\n        this.type = type;\n        this.processor = processor;\n    }\n    /**\n     * Returns a string of HTML used to create a `<template>` element.\n     */\n    getHTML() {\n        const l = this.strings.length - 1;\n        let html = '';\n        let isCommentBinding = false;\n        for (let i = 0; i < l; i++) {\n            const s = this.strings[i];\n            // For each binding we want to determine the kind of marker to insert\n            // into the template source before it's parsed by the browser's HTML\n            // parser. The marker type is based on whether the expression is in an\n            // attribute, text, or comment position.\n            //   * For node-position bindings we insert a comment with the marker\n            //     sentinel as its text content, like <!--{{lit-guid}}-->.\n            //   * For attribute bindings we insert just the marker sentinel for the\n            //     first binding, so that we support unquoted attribute bindings.\n            //     Subsequent bindings can use a comment marker because multi-binding\n            //     attributes must be quoted.\n            //   * For comment bindings we insert just the marker sentinel so we don't\n            //     close the comment.\n            //\n            // The following code scans the template source, but is *not* an HTML\n            // parser. We don't need to track the tree structure of the HTML, only\n            // whether a binding is inside a comment, and if not, if it appears to be\n            // the first binding in an attribute.\n            const commentOpen = s.lastIndexOf('<!--');\n            // We're in comment position if we have a comment open with no following\n            // comment close. Because <-- can appear in an attribute value there can\n            // be false positives.\n            isCommentBinding = (commentOpen > -1 || isCommentBinding) &&\n                s.indexOf('-->', commentOpen + 1) === -1;\n            // Check to see if we have an attribute-like sequence preceding the\n            // expression. This can match \"name=value\" like structures in text,\n            // comments, and attribute values, so there can be false-positives.\n            const attributeMatch = lastAttributeNameRegex.exec(s);\n            if (attributeMatch === null) {\n                // We're only in this branch if we don't have a attribute-like\n                // preceding sequence. For comments, this guards against unusual\n                // attribute values like <div foo=\"<!--${'bar'}\">. Cases like\n                // <!-- foo=${'bar'}--> are handled correctly in the attribute branch\n                // below.\n                html += s + (isCommentBinding ? commentMarker : nodeMarker);\n            }\n            else {\n                // For attributes we use just a marker sentinel, and also append a\n                // $lit$ suffix to the name to opt-out of attribute-specific parsing\n                // that IE and Edge do for style and certain SVG attributes.\n                html += s.substr(0, attributeMatch.index) + attributeMatch[1] +\n                    attributeMatch[2] + boundAttributeSuffix + attributeMatch[3] +\n                    marker;\n            }\n        }\n        html += this.strings[l];\n        return html;\n    }\n    getTemplateElement() {\n        const template = document.createElement('template');\n        let value = this.getHTML();\n        if (policy !== undefined) {\n            // this is secure because `this.strings` is a TemplateStringsArray.\n            // TODO: validate this when\n            // https://github.com/tc39/proposal-array-is-template-object is\n            // implemented.\n            value = policy.createHTML(value);\n        }\n        template.innerHTML = value;\n        return template;\n    }\n}\n/**\n * A TemplateResult for SVG fragments.\n *\n * This class wraps HTML in an `<svg>` tag in order to parse its contents in the\n * SVG namespace, then modifies the template to remove the `<svg>` tag so that\n * clones only container the original fragment.\n */\nexport class SVGTemplateResult extends TemplateResult {\n    getHTML() {\n        return `<svg>${super.getHTML()}</svg>`;\n    }\n    getTemplateElement() {\n        const template = super.getTemplateElement();\n        const content = template.content;\n        const svgElement = content.firstChild;\n        content.removeChild(svgElement);\n        reparentNodes(content, svgElement.firstChild);\n        return template;\n    }\n}\n//# sourceMappingURL=template-result.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { isDirective } from './directive.js';\nimport { removeNodes } from './dom.js';\nimport { noChange, nothing } from './part.js';\nimport { TemplateInstance } from './template-instance.js';\nimport { TemplateResult } from './template-result.js';\nimport { createMarker } from './template.js';\nexport const isPrimitive = (value) => {\n    return (value === null ||\n        !(typeof value === 'object' || typeof value === 'function'));\n};\nexport const isIterable = (value) => {\n    return Array.isArray(value) ||\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        !!(value && value[Symbol.iterator]);\n};\n/**\n * Writes attribute values to the DOM for a group of AttributeParts bound to a\n * single attribute. The value is only set once even if there are multiple parts\n * for an attribute.\n */\nexport class AttributeCommitter {\n    constructor(element, name, strings) {\n        this.dirty = true;\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n        this.parts = [];\n        for (let i = 0; i < strings.length - 1; i++) {\n            this.parts[i] = this._createPart();\n        }\n    }\n    /**\n     * Creates a single part. Override this to create a differnt type of part.\n     */\n    _createPart() {\n        return new AttributePart(this);\n    }\n    _getValue() {\n        const strings = this.strings;\n        const l = strings.length - 1;\n        const parts = this.parts;\n        // If we're assigning an attribute via syntax like:\n        //    attr=\"${foo}\"  or  attr=${foo}\n        // but not\n        //    attr=\"${foo} ${bar}\" or attr=\"${foo} baz\"\n        // then we don't want to coerce the attribute value into one long\n        // string. Instead we want to just return the value itself directly,\n        // so that sanitizeDOMValue can get the actual value rather than\n        // String(value)\n        // The exception is if v is an array, in which case we do want to smash\n        // it together into a string without calling String() on the array.\n        //\n        // This also allows trusted values (when using TrustedTypes) being\n        // assigned to DOM sinks without being stringified in the process.\n        if (l === 1 && strings[0] === '' && strings[1] === '') {\n            const v = parts[0].value;\n            if (typeof v === 'symbol') {\n                return String(v);\n            }\n            if (typeof v === 'string' || !isIterable(v)) {\n                return v;\n            }\n        }\n        let text = '';\n        for (let i = 0; i < l; i++) {\n            text += strings[i];\n            const part = parts[i];\n            if (part !== undefined) {\n                const v = part.value;\n                if (isPrimitive(v) || !isIterable(v)) {\n                    text += typeof v === 'string' ? v : String(v);\n                }\n                else {\n                    for (const t of v) {\n                        text += typeof t === 'string' ? t : String(t);\n                    }\n                }\n            }\n        }\n        text += strings[l];\n        return text;\n    }\n    commit() {\n        if (this.dirty) {\n            this.dirty = false;\n            this.element.setAttribute(this.name, this._getValue());\n        }\n    }\n}\n/**\n * A Part that controls all or part of an attribute value.\n */\nexport class AttributePart {\n    constructor(committer) {\n        this.value = undefined;\n        this.committer = committer;\n    }\n    setValue(value) {\n        if (value !== noChange && (!isPrimitive(value) || value !== this.value)) {\n            this.value = value;\n            // If the value is a not a directive, dirty the committer so that it'll\n            // call setAttribute. If the value is a directive, it'll dirty the\n            // committer if it calls setValue().\n            if (!isDirective(value)) {\n                this.committer.dirty = true;\n            }\n        }\n    }\n    commit() {\n        while (isDirective(this.value)) {\n            const directive = this.value;\n            this.value = noChange;\n            directive(this);\n        }\n        if (this.value === noChange) {\n            return;\n        }\n        this.committer.commit();\n    }\n}\n/**\n * A Part that controls a location within a Node tree. Like a Range, NodePart\n * has start and end locations and can set and update the Nodes between those\n * locations.\n *\n * NodeParts support several value types: primitives, Nodes, TemplateResults,\n * as well as arrays and iterables of those types.\n */\nexport class NodePart {\n    constructor(options) {\n        this.value = undefined;\n        this.__pendingValue = undefined;\n        this.options = options;\n    }\n    /**\n     * Appends this part into a container.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    appendInto(container) {\n        this.startNode = container.appendChild(createMarker());\n        this.endNode = container.appendChild(createMarker());\n    }\n    /**\n     * Inserts this part after the `ref` node (between `ref` and `ref`'s next\n     * sibling). Both `ref` and its next sibling must be static, unchanging nodes\n     * such as those that appear in a literal section of a template.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    insertAfterNode(ref) {\n        this.startNode = ref;\n        this.endNode = ref.nextSibling;\n    }\n    /**\n     * Appends this part into a parent part.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    appendIntoPart(part) {\n        part.__insert(this.startNode = createMarker());\n        part.__insert(this.endNode = createMarker());\n    }\n    /**\n     * Inserts this part after the `ref` part.\n     *\n     * This part must be empty, as its contents are not automatically moved.\n     */\n    insertAfterPart(ref) {\n        ref.__insert(this.startNode = createMarker());\n        this.endNode = ref.endNode;\n        ref.endNode = this.startNode;\n    }\n    setValue(value) {\n        this.__pendingValue = value;\n    }\n    commit() {\n        if (this.startNode.parentNode === null) {\n            return;\n        }\n        while (isDirective(this.__pendingValue)) {\n            const directive = this.__pendingValue;\n            this.__pendingValue = noChange;\n            directive(this);\n        }\n        const value = this.__pendingValue;\n        if (value === noChange) {\n            return;\n        }\n        if (isPrimitive(value)) {\n            if (value !== this.value) {\n                this.__commitText(value);\n            }\n        }\n        else if (value instanceof TemplateResult) {\n            this.__commitTemplateResult(value);\n        }\n        else if (value instanceof Node) {\n            this.__commitNode(value);\n        }\n        else if (isIterable(value)) {\n            this.__commitIterable(value);\n        }\n        else if (value === nothing) {\n            this.value = nothing;\n            this.clear();\n        }\n        else {\n            // Fallback, will render the string representation\n            this.__commitText(value);\n        }\n    }\n    __insert(node) {\n        this.endNode.parentNode.insertBefore(node, this.endNode);\n    }\n    __commitNode(value) {\n        if (this.value === value) {\n            return;\n        }\n        this.clear();\n        this.__insert(value);\n        this.value = value;\n    }\n    __commitText(value) {\n        const node = this.startNode.nextSibling;\n        value = value == null ? '' : value;\n        // If `value` isn't already a string, we explicitly convert it here in case\n        // it can't be implicitly converted - i.e. it's a symbol.\n        const valueAsString = typeof value === 'string' ? value : String(value);\n        if (node === this.endNode.previousSibling &&\n            node.nodeType === 3 /* Node.TEXT_NODE */) {\n            // If we only have a single text node between the markers, we can just\n            // set its value, rather than replacing it.\n            // TODO(justinfagnani): Can we just check if this.value is primitive?\n            node.data = valueAsString;\n        }\n        else {\n            this.__commitNode(document.createTextNode(valueAsString));\n        }\n        this.value = value;\n    }\n    __commitTemplateResult(value) {\n        const template = this.options.templateFactory(value);\n        if (this.value instanceof TemplateInstance &&\n            this.value.template === template) {\n            this.value.update(value.values);\n        }\n        else {\n            // Make sure we propagate the template processor from the TemplateResult\n            // so that we use its syntax extension, etc. The template factory comes\n            // from the render function options so that it can control template\n            // caching and preprocessing.\n            const instance = new TemplateInstance(template, value.processor, this.options);\n            const fragment = instance._clone();\n            instance.update(value.values);\n            this.__commitNode(fragment);\n            this.value = instance;\n        }\n    }\n    __commitIterable(value) {\n        // For an Iterable, we create a new InstancePart per item, then set its\n        // value to the item. This is a little bit of overhead for every item in\n        // an Iterable, but it lets us recurse easily and efficiently update Arrays\n        // of TemplateResults that will be commonly returned from expressions like:\n        // array.map((i) => html`${i}`), by reusing existing TemplateInstances.\n        // If _value is an array, then the previous render was of an\n        // iterable and _value will contain the NodeParts from the previous\n        // render. If _value is not an array, clear this part and make a new\n        // array for NodeParts.\n        if (!Array.isArray(this.value)) {\n            this.value = [];\n            this.clear();\n        }\n        // Lets us keep track of how many items we stamped so we can clear leftover\n        // items from a previous render\n        const itemParts = this.value;\n        let partIndex = 0;\n        let itemPart;\n        for (const item of value) {\n            // Try to reuse an existing part\n            itemPart = itemParts[partIndex];\n            // If no existing part, create a new one\n            if (itemPart === undefined) {\n                itemPart = new NodePart(this.options);\n                itemParts.push(itemPart);\n                if (partIndex === 0) {\n                    itemPart.appendIntoPart(this);\n                }\n                else {\n                    itemPart.insertAfterPart(itemParts[partIndex - 1]);\n                }\n            }\n            itemPart.setValue(item);\n            itemPart.commit();\n            partIndex++;\n        }\n        if (partIndex < itemParts.length) {\n            // Truncate the parts array so _value reflects the current state\n            itemParts.length = partIndex;\n            this.clear(itemPart && itemPart.endNode);\n        }\n    }\n    clear(startNode = this.startNode) {\n        removeNodes(this.startNode.parentNode, startNode.nextSibling, this.endNode);\n    }\n}\n/**\n * Implements a boolean attribute, roughly as defined in the HTML\n * specification.\n *\n * If the value is truthy, then the attribute is present with a value of\n * ''. If the value is falsey, the attribute is removed.\n */\nexport class BooleanAttributePart {\n    constructor(element, name, strings) {\n        this.value = undefined;\n        this.__pendingValue = undefined;\n        if (strings.length !== 2 || strings[0] !== '' || strings[1] !== '') {\n            throw new Error('Boolean attributes can only contain a single expression');\n        }\n        this.element = element;\n        this.name = name;\n        this.strings = strings;\n    }\n    setValue(value) {\n        this.__pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this.__pendingValue)) {\n            const directive = this.__pendingValue;\n            this.__pendingValue = noChange;\n            directive(this);\n        }\n        if (this.__pendingValue === noChange) {\n            return;\n        }\n        const value = !!this.__pendingValue;\n        if (this.value !== value) {\n            if (value) {\n                this.element.setAttribute(this.name, '');\n            }\n            else {\n                this.element.removeAttribute(this.name);\n            }\n            this.value = value;\n        }\n        this.__pendingValue = noChange;\n    }\n}\n/**\n * Sets attribute values for PropertyParts, so that the value is only set once\n * even if there are multiple parts for a property.\n *\n * If an expression controls the whole property value, then the value is simply\n * assigned to the property under control. If there are string literals or\n * multiple expressions, then the strings are expressions are interpolated into\n * a string first.\n */\nexport class PropertyCommitter extends AttributeCommitter {\n    constructor(element, name, strings) {\n        super(element, name, strings);\n        this.single =\n            (strings.length === 2 && strings[0] === '' && strings[1] === '');\n    }\n    _createPart() {\n        return new PropertyPart(this);\n    }\n    _getValue() {\n        if (this.single) {\n            return this.parts[0].value;\n        }\n        return super._getValue();\n    }\n    commit() {\n        if (this.dirty) {\n            this.dirty = false;\n            // eslint-disable-next-line @typescript-eslint/no-explicit-any\n            this.element[this.name] = this._getValue();\n        }\n    }\n}\nexport class PropertyPart extends AttributePart {\n}\n// Detect event listener options support. If the `capture` property is read\n// from the options object, then options are supported. If not, then the third\n// argument to add/removeEventListener is interpreted as the boolean capture\n// value so we should only pass the `capture` property.\nlet eventOptionsSupported = false;\n// Wrap into an IIFE because MS Edge <= v41 does not support having try/catch\n// blocks right into the body of a module\n(() => {\n    try {\n        const options = {\n            get capture() {\n                eventOptionsSupported = true;\n                return false;\n            }\n        };\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        window.addEventListener('test', options, options);\n        // eslint-disable-next-line @typescript-eslint/no-explicit-any\n        window.removeEventListener('test', options, options);\n    }\n    catch (_e) {\n        // event options not supported\n    }\n})();\nexport class EventPart {\n    constructor(element, eventName, eventContext) {\n        this.value = undefined;\n        this.__pendingValue = undefined;\n        this.element = element;\n        this.eventName = eventName;\n        this.eventContext = eventContext;\n        this.__boundHandleEvent = (e) => this.handleEvent(e);\n    }\n    setValue(value) {\n        this.__pendingValue = value;\n    }\n    commit() {\n        while (isDirective(this.__pendingValue)) {\n            const directive = this.__pendingValue;\n            this.__pendingValue = noChange;\n            directive(this);\n        }\n        if (this.__pendingValue === noChange) {\n            return;\n        }\n        const newListener = this.__pendingValue;\n        const oldListener = this.value;\n        const shouldRemoveListener = newListener == null ||\n            oldListener != null &&\n                (newListener.capture !== oldListener.capture ||\n                    newListener.once !== oldListener.once ||\n                    newListener.passive !== oldListener.passive);\n        const shouldAddListener = newListener != null && (oldListener == null || shouldRemoveListener);\n        if (shouldRemoveListener) {\n            this.element.removeEventListener(this.eventName, this.__boundHandleEvent, this.__options);\n        }\n        if (shouldAddListener) {\n            this.__options = getOptions(newListener);\n            this.element.addEventListener(this.eventName, this.__boundHandleEvent, this.__options);\n        }\n        this.value = newListener;\n        this.__pendingValue = noChange;\n    }\n    handleEvent(event) {\n        if (typeof this.value === 'function') {\n            this.value.call(this.eventContext || this.element, event);\n        }\n        else {\n            this.value.handleEvent(event);\n        }\n    }\n}\n// We copy options because of the inconsistent behavior of browsers when reading\n// the third argument of add/removeEventListener. IE11 doesn't support options\n// at all. Chrome 41 only reads `capture` if the argument is an object.\nconst getOptions = (o) => o &&\n    (eventOptionsSupported ?\n        { capture: o.capture, passive: o.passive, once: o.once } :\n        o.capture);\n//# sourceMappingURL=parts.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { AttributeCommitter, BooleanAttributePart, EventPart, NodePart, PropertyCommitter } from './parts.js';\n/**\n * Creates Parts when a template is instantiated.\n */\nexport class DefaultTemplateProcessor {\n    /**\n     * Create parts for an attribute-position binding, given the event, attribute\n     * name, and string literals.\n     *\n     * @param element The element containing the binding\n     * @param name  The attribute name\n     * @param strings The string literals. There are always at least two strings,\n     *   event for fully-controlled bindings with a single expression.\n     */\n    handleAttributeExpressions(element, name, strings, options) {\n        const prefix = name[0];\n        if (prefix === '.') {\n            const committer = new PropertyCommitter(element, name.slice(1), strings);\n            return committer.parts;\n        }\n        if (prefix === '@') {\n            return [new EventPart(element, name.slice(1), options.eventContext)];\n        }\n        if (prefix === '?') {\n            return [new BooleanAttributePart(element, name.slice(1), strings)];\n        }\n        const committer = new AttributeCommitter(element, name, strings);\n        return committer.parts;\n    }\n    /**\n     * Create parts for a text-position binding.\n     * @param templateFactory\n     */\n    handleTextExpression(options) {\n        return new NodePart(options);\n    }\n}\nexport const defaultTemplateProcessor = new DefaultTemplateProcessor();\n//# sourceMappingURL=default-template-processor.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { marker, Template } from './template.js';\n/**\n * The default TemplateFactory which caches Templates keyed on\n * result.type and result.strings.\n */\nexport function templateFactory(result) {\n    let templateCache = templateCaches.get(result.type);\n    if (templateCache === undefined) {\n        templateCache = {\n            stringsArray: new WeakMap(),\n            keyString: new Map()\n        };\n        templateCaches.set(result.type, templateCache);\n    }\n    let template = templateCache.stringsArray.get(result.strings);\n    if (template !== undefined) {\n        return template;\n    }\n    // If the TemplateStringsArray is new, generate a key from the strings\n    // This key is shared between all templates with identical content\n    const key = result.strings.join(marker);\n    // Check if we already have a Template for this key\n    template = templateCache.keyString.get(key);\n    if (template === undefined) {\n        // If we have not seen this key before, create a new Template\n        template = new Template(result, result.getTemplateElement());\n        // Cache the Template for this key\n        templateCache.keyString.set(key, template);\n    }\n    // Cache all future queries for this TemplateStringsArray\n    templateCache.stringsArray.set(result.strings, template);\n    return template;\n}\nexport const templateCaches = new Map();\n//# sourceMappingURL=template-factory.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { removeNodes } from './dom.js';\nimport { NodePart } from './parts.js';\nimport { templateFactory } from './template-factory.js';\nexport const parts = new WeakMap();\n/**\n * Renders a template result or other value to a container.\n *\n * To update a container with new values, reevaluate the template literal and\n * call `render` with the new result.\n *\n * @param result Any value renderable by NodePart - typically a TemplateResult\n *     created by evaluating a template tag like `html` or `svg`.\n * @param container A DOM parent to render to. The entire contents are either\n *     replaced, or efficiently updated if the same result type was previous\n *     rendered there.\n * @param options RenderOptions for the entire render tree rendered to this\n *     container. Render options must *not* change between renders to the same\n *     container, as those changes will not effect previously rendered DOM.\n */\nexport const render = (result, container, options) => {\n    let part = parts.get(container);\n    if (part === undefined) {\n        removeNodes(container, container.firstChild);\n        parts.set(container, part = new NodePart(Object.assign({ templateFactory }, options)));\n        part.appendInto(container);\n    }\n    part.setValue(result);\n    part.commit();\n};\n//# sourceMappingURL=render.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n *\n * Main lit-html module.\n *\n * Main exports:\n *\n * -  [[html]]\n * -  [[svg]]\n * -  [[render]]\n *\n * @packageDocumentation\n */\n/**\n * Do not remove this comment; it keeps typedoc from misplacing the module\n * docs.\n */\nimport { defaultTemplateProcessor } from './lib/default-template-processor.js';\nimport { SVGTemplateResult, TemplateResult } from './lib/template-result.js';\nexport { DefaultTemplateProcessor, defaultTemplateProcessor } from './lib/default-template-processor.js';\nexport { directive, isDirective } from './lib/directive.js';\n// TODO(justinfagnani): remove line when we get NodePart moving methods\nexport { removeNodes, reparentNodes } from './lib/dom.js';\nexport { noChange, nothing } from './lib/part.js';\nexport { AttributeCommitter, AttributePart, BooleanAttributePart, EventPart, isIterable, isPrimitive, NodePart, PropertyCommitter, PropertyPart } from './lib/parts.js';\nexport { parts, render } from './lib/render.js';\nexport { templateCaches, templateFactory } from './lib/template-factory.js';\nexport { TemplateInstance } from './lib/template-instance.js';\nexport { SVGTemplateResult, TemplateResult } from './lib/template-result.js';\nexport { createMarker, isTemplatePartActive, Template } from './lib/template.js';\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for lit-html usage.\n// TODO(justinfagnani): inject version number at build time\nif (typeof window !== 'undefined') {\n    (window['litHtmlVersions'] || (window['litHtmlVersions'] = [])).push('1.4.1');\n}\n/**\n * Interprets a template literal as an HTML template that can efficiently\n * render to and update a container.\n */\nexport const html = (strings, ...values) => new TemplateResult(strings, values, 'html', defaultTemplateProcessor);\n/**\n * Interprets a template literal as an SVG template that can efficiently\n * render to and update a container.\n */\nexport const svg = (strings, ...values) => new SVGTemplateResult(strings, values, 'svg', defaultTemplateProcessor);\n//# sourceMappingURL=lit-html.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { isTemplatePartActive } from './template.js';\nconst walkerNodeFilter = 133 /* NodeFilter.SHOW_{ELEMENT|COMMENT|TEXT} */;\n/**\n * Removes the list of nodes from a Template safely. In addition to removing\n * nodes from the Template, the Template part indices are updated to match\n * the mutated Template DOM.\n *\n * As the template is walked the removal state is tracked and\n * part indices are adjusted as needed.\n *\n * div\n *   div#1 (remove) <-- start removing (removing node is div#1)\n *     div\n *       div#2 (remove)  <-- continue removing (removing node is still div#1)\n *         div\n * div <-- stop removing since previous sibling is the removing node (div#1,\n * removed 4 nodes)\n */\nexport function removeNodesFromTemplate(template, nodesToRemove) {\n    const { element: { content }, parts } = template;\n    const walker = document.createTreeWalker(content, walkerNodeFilter, null, false);\n    let partIndex = nextActiveIndexInTemplateParts(parts);\n    let part = parts[partIndex];\n    let nodeIndex = -1;\n    let removeCount = 0;\n    const nodesToRemoveInTemplate = [];\n    let currentRemovingNode = null;\n    while (walker.nextNode()) {\n        nodeIndex++;\n        const node = walker.currentNode;\n        // End removal if stepped past the removing node\n        if (node.previousSibling === currentRemovingNode) {\n            currentRemovingNode = null;\n        }\n        // A node to remove was found in the template\n        if (nodesToRemove.has(node)) {\n            nodesToRemoveInTemplate.push(node);\n            // Track node we're removing\n            if (currentRemovingNode === null) {\n                currentRemovingNode = node;\n            }\n        }\n        // When removing, increment count by which to adjust subsequent part indices\n        if (currentRemovingNode !== null) {\n            removeCount++;\n        }\n        while (part !== undefined && part.index === nodeIndex) {\n            // If part is in a removed node deactivate it by setting index to -1 or\n            // adjust the index as needed.\n            part.index = currentRemovingNode !== null ? -1 : part.index - removeCount;\n            // go to the next active part.\n            partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n            part = parts[partIndex];\n        }\n    }\n    nodesToRemoveInTemplate.forEach((n) => n.parentNode.removeChild(n));\n}\nconst countNodes = (node) => {\n    let count = (node.nodeType === 11 /* Node.DOCUMENT_FRAGMENT_NODE */) ? 0 : 1;\n    const walker = document.createTreeWalker(node, walkerNodeFilter, null, false);\n    while (walker.nextNode()) {\n        count++;\n    }\n    return count;\n};\nconst nextActiveIndexInTemplateParts = (parts, startIndex = -1) => {\n    for (let i = startIndex + 1; i < parts.length; i++) {\n        const part = parts[i];\n        if (isTemplatePartActive(part)) {\n            return i;\n        }\n    }\n    return -1;\n};\n/**\n * Inserts the given node into the Template, optionally before the given\n * refNode. In addition to inserting the node into the Template, the Template\n * part indices are updated to match the mutated Template DOM.\n */\nexport function insertNodeIntoTemplate(template, node, refNode = null) {\n    const { element: { content }, parts } = template;\n    // If there's no refNode, then put node at end of template.\n    // No part indices need to be shifted in this case.\n    if (refNode === null || refNode === undefined) {\n        content.appendChild(node);\n        return;\n    }\n    const walker = document.createTreeWalker(content, walkerNodeFilter, null, false);\n    let partIndex = nextActiveIndexInTemplateParts(parts);\n    let insertCount = 0;\n    let walkerIndex = -1;\n    while (walker.nextNode()) {\n        walkerIndex++;\n        const walkerNode = walker.currentNode;\n        if (walkerNode === refNode) {\n            insertCount = countNodes(node);\n            refNode.parentNode.insertBefore(node, refNode);\n        }\n        while (partIndex !== -1 && parts[partIndex].index === walkerIndex) {\n            // If we've inserted the node, simply adjust all subsequent parts\n            if (insertCount > 0) {\n                while (partIndex !== -1) {\n                    parts[partIndex].index += insertCount;\n                    partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n                }\n                return;\n            }\n            partIndex = nextActiveIndexInTemplateParts(parts, partIndex);\n        }\n    }\n}\n//# sourceMappingURL=modify-template.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\n/**\n * Module to add shady DOM/shady CSS polyfill support to lit-html template\n * rendering. See the [[render]] method for details.\n *\n * @packageDocumentation\n */\n/**\n * Do not remove this comment; it keeps typedoc from misplacing the module\n * docs.\n */\nimport { removeNodes } from './dom.js';\nimport { insertNodeIntoTemplate, removeNodesFromTemplate } from './modify-template.js';\nimport { parts, render as litRender } from './render.js';\nimport { templateCaches } from './template-factory.js';\nimport { TemplateInstance } from './template-instance.js';\nimport { marker, Template } from './template.js';\nexport { html, svg, TemplateResult } from '../lit-html.js';\n// Get a key to lookup in `templateCaches`.\nconst getTemplateCacheKey = (type, scopeName) => `${type}--${scopeName}`;\nlet compatibleShadyCSSVersion = true;\nif (typeof window.ShadyCSS === 'undefined') {\n    compatibleShadyCSSVersion = false;\n}\nelse if (typeof window.ShadyCSS.prepareTemplateDom === 'undefined') {\n    console.warn(`Incompatible ShadyCSS version detected. ` +\n        `Please update to at least @webcomponents/webcomponentsjs@2.0.2 and ` +\n        `@webcomponents/shadycss@1.3.1.`);\n    compatibleShadyCSSVersion = false;\n}\n/**\n * Template factory which scopes template DOM using ShadyCSS.\n * @param scopeName {string}\n */\nexport const shadyTemplateFactory = (scopeName) => (result) => {\n    const cacheKey = getTemplateCacheKey(result.type, scopeName);\n    let templateCache = templateCaches.get(cacheKey);\n    if (templateCache === undefined) {\n        templateCache = {\n            stringsArray: new WeakMap(),\n            keyString: new Map()\n        };\n        templateCaches.set(cacheKey, templateCache);\n    }\n    let template = templateCache.stringsArray.get(result.strings);\n    if (template !== undefined) {\n        return template;\n    }\n    const key = result.strings.join(marker);\n    template = templateCache.keyString.get(key);\n    if (template === undefined) {\n        const element = result.getTemplateElement();\n        if (compatibleShadyCSSVersion) {\n            window.ShadyCSS.prepareTemplateDom(element, scopeName);\n        }\n        template = new Template(result, element);\n        templateCache.keyString.set(key, template);\n    }\n    templateCache.stringsArray.set(result.strings, template);\n    return template;\n};\nconst TEMPLATE_TYPES = ['html', 'svg'];\n/**\n * Removes all style elements from Templates for the given scopeName.\n */\nconst removeStylesFromLitTemplates = (scopeName) => {\n    TEMPLATE_TYPES.forEach((type) => {\n        const templates = templateCaches.get(getTemplateCacheKey(type, scopeName));\n        if (templates !== undefined) {\n            templates.keyString.forEach((template) => {\n                const { element: { content } } = template;\n                // IE 11 doesn't support the iterable param Set constructor\n                const styles = new Set();\n                Array.from(content.querySelectorAll('style')).forEach((s) => {\n                    styles.add(s);\n                });\n                removeNodesFromTemplate(template, styles);\n            });\n        }\n    });\n};\nconst shadyRenderSet = new Set();\n/**\n * For the given scope name, ensures that ShadyCSS style scoping is performed.\n * This is done just once per scope name so the fragment and template cannot\n * be modified.\n * (1) extracts styles from the rendered fragment and hands them to ShadyCSS\n * to be scoped and appended to the document\n * (2) removes style elements from all lit-html Templates for this scope name.\n *\n * Note, <style> elements can only be placed into templates for the\n * initial rendering of the scope. If <style> elements are included in templates\n * dynamically rendered to the scope (after the first scope render), they will\n * not be scoped and the <style> will be left in the template and rendered\n * output.\n */\nconst prepareTemplateStyles = (scopeName, renderedDOM, template) => {\n    shadyRenderSet.add(scopeName);\n    // If `renderedDOM` is stamped from a Template, then we need to edit that\n    // Template's underlying template element. Otherwise, we create one here\n    // to give to ShadyCSS, which still requires one while scoping.\n    const templateElement = !!template ? template.element : document.createElement('template');\n    // Move styles out of rendered DOM and store.\n    const styles = renderedDOM.querySelectorAll('style');\n    const { length } = styles;\n    // If there are no styles, skip unnecessary work\n    if (length === 0) {\n        // Ensure prepareTemplateStyles is called to support adding\n        // styles via `prepareAdoptedCssText` since that requires that\n        // `prepareTemplateStyles` is called.\n        //\n        // ShadyCSS will only update styles containing @apply in the template\n        // given to `prepareTemplateStyles`. If no lit Template was given,\n        // ShadyCSS will not be able to update uses of @apply in any relevant\n        // template. However, this is not a problem because we only create the\n        // template for the purpose of supporting `prepareAdoptedCssText`,\n        // which doesn't support @apply at all.\n        window.ShadyCSS.prepareTemplateStyles(templateElement, scopeName);\n        return;\n    }\n    const condensedStyle = document.createElement('style');\n    // Collect styles into a single style. This helps us make sure ShadyCSS\n    // manipulations will not prevent us from being able to fix up template\n    // part indices.\n    // NOTE: collecting styles is inefficient for browsers but ShadyCSS\n    // currently does this anyway. When it does not, this should be changed.\n    for (let i = 0; i < length; i++) {\n        const style = styles[i];\n        style.parentNode.removeChild(style);\n        condensedStyle.textContent += style.textContent;\n    }\n    // Remove styles from nested templates in this scope.\n    removeStylesFromLitTemplates(scopeName);\n    // And then put the condensed style into the \"root\" template passed in as\n    // `template`.\n    const content = templateElement.content;\n    if (!!template) {\n        insertNodeIntoTemplate(template, condensedStyle, content.firstChild);\n    }\n    else {\n        content.insertBefore(condensedStyle, content.firstChild);\n    }\n    // Note, it's important that ShadyCSS gets the template that `lit-html`\n    // will actually render so that it can update the style inside when\n    // needed (e.g. @apply native Shadow DOM case).\n    window.ShadyCSS.prepareTemplateStyles(templateElement, scopeName);\n    const style = content.querySelector('style');\n    if (window.ShadyCSS.nativeShadow && style !== null) {\n        // When in native Shadow DOM, ensure the style created by ShadyCSS is\n        // included in initially rendered output (`renderedDOM`).\n        renderedDOM.insertBefore(style.cloneNode(true), renderedDOM.firstChild);\n    }\n    else if (!!template) {\n        // When no style is left in the template, parts will be broken as a\n        // result. To fix this, we put back the style node ShadyCSS removed\n        // and then tell lit to remove that node from the template.\n        // There can be no style in the template in 2 cases (1) when Shady DOM\n        // is in use, ShadyCSS removes all styles, (2) when native Shadow DOM\n        // is in use ShadyCSS removes the style if it contains no content.\n        // NOTE, ShadyCSS creates its own style so we can safely add/remove\n        // `condensedStyle` here.\n        content.insertBefore(condensedStyle, content.firstChild);\n        const removes = new Set();\n        removes.add(condensedStyle);\n        removeNodesFromTemplate(template, removes);\n    }\n};\n/**\n * Extension to the standard `render` method which supports rendering\n * to ShadowRoots when the ShadyDOM (https://github.com/webcomponents/shadydom)\n * and ShadyCSS (https://github.com/webcomponents/shadycss) polyfills are used\n * or when the webcomponentsjs\n * (https://github.com/webcomponents/webcomponentsjs) polyfill is used.\n *\n * Adds a `scopeName` option which is used to scope element DOM and stylesheets\n * when native ShadowDOM is unavailable. The `scopeName` will be added to\n * the class attribute of all rendered DOM. In addition, any style elements will\n * be automatically re-written with this `scopeName` selector and moved out\n * of the rendered DOM and into the document `<head>`.\n *\n * It is common to use this render method in conjunction with a custom element\n * which renders a shadowRoot. When this is done, typically the element's\n * `localName` should be used as the `scopeName`.\n *\n * In addition to DOM scoping, ShadyCSS also supports a basic shim for css\n * custom properties (needed only on older browsers like IE11) and a shim for\n * a deprecated feature called `@apply` that supports applying a set of css\n * custom properties to a given location.\n *\n * Usage considerations:\n *\n * * Part values in `<style>` elements are only applied the first time a given\n * `scopeName` renders. Subsequent changes to parts in style elements will have\n * no effect. Because of this, parts in style elements should only be used for\n * values that will never change, for example parts that set scope-wide theme\n * values or parts which render shared style elements.\n *\n * * Note, due to a limitation of the ShadyDOM polyfill, rendering in a\n * custom element's `constructor` is not supported. Instead rendering should\n * either done asynchronously, for example at microtask timing (for example\n * `Promise.resolve()`), or be deferred until the first time the element's\n * `connectedCallback` runs.\n *\n * Usage considerations when using shimmed custom properties or `@apply`:\n *\n * * Whenever any dynamic changes are made which affect\n * css custom properties, `ShadyCSS.styleElement(element)` must be called\n * to update the element. There are two cases when this is needed:\n * (1) the element is connected to a new parent, (2) a class is added to the\n * element that causes it to match different custom properties.\n * To address the first case when rendering a custom element, `styleElement`\n * should be called in the element's `connectedCallback`.\n *\n * * Shimmed custom properties may only be defined either for an entire\n * shadowRoot (for example, in a `:host` rule) or via a rule that directly\n * matches an element with a shadowRoot. In other words, instead of flowing from\n * parent to child as do native css custom properties, shimmed custom properties\n * flow only from shadowRoots to nested shadowRoots.\n *\n * * When using `@apply` mixing css shorthand property names with\n * non-shorthand names (for example `border` and `border-width`) is not\n * supported.\n */\nexport const render = (result, container, options) => {\n    if (!options || typeof options !== 'object' || !options.scopeName) {\n        throw new Error('The `scopeName` option is required.');\n    }\n    const scopeName = options.scopeName;\n    const hasRendered = parts.has(container);\n    const needsScoping = compatibleShadyCSSVersion &&\n        container.nodeType === 11 /* Node.DOCUMENT_FRAGMENT_NODE */ &&\n        !!container.host;\n    // Handle first render to a scope specially...\n    const firstScopeRender = needsScoping && !shadyRenderSet.has(scopeName);\n    // On first scope render, render into a fragment; this cannot be a single\n    // fragment that is reused since nested renders can occur synchronously.\n    const renderContainer = firstScopeRender ? document.createDocumentFragment() : container;\n    litRender(result, renderContainer, Object.assign({ templateFactory: shadyTemplateFactory(scopeName) }, options));\n    // When performing first scope render,\n    // (1) We've rendered into a fragment so that there's a chance to\n    // `prepareTemplateStyles` before sub-elements hit the DOM\n    // (which might cause them to render based on a common pattern of\n    // rendering in a custom element's `connectedCallback`);\n    // (2) Scope the template with ShadyCSS one time only for this scope.\n    // (3) Render the fragment into the container and make sure the\n    // container knows its `part` is the one we just rendered. This ensures\n    // DOM will be re-used on subsequent renders.\n    if (firstScopeRender) {\n        const part = parts.get(renderContainer);\n        parts.delete(renderContainer);\n        // ShadyCSS might have style sheets (e.g. from `prepareAdoptedCssText`)\n        // that should apply to `renderContainer` even if the rendered value is\n        // not a TemplateInstance. However, it will only insert scoped styles\n        // into the document if `prepareTemplateStyles` has already been called\n        // for the given scope name.\n        const template = part.value instanceof TemplateInstance ?\n            part.value.template :\n            undefined;\n        prepareTemplateStyles(scopeName, renderContainer, template);\n        removeNodes(container, container.firstChild);\n        container.appendChild(renderContainer);\n        parts.set(container, part);\n    }\n    // After elements have hit the DOM, update styling if this is the\n    // initial render to this container.\n    // This is needed whenever dynamic changes are made so it would be\n    // safest to do every render; however, this would regress performance\n    // so we leave it up to the user to call `ShadyCSS.styleElement`\n    // for dynamic changes.\n    if (!hasRendered && needsScoping) {\n        window.ShadyCSS.styleElement(container.host);\n    }\n};\n//# sourceMappingURL=shady-render.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nvar _a;\n/**\n * When using Closure Compiler, JSCompiler_renameProperty(property, object) is\n * replaced at compile time by the munged name for object[property]. We cannot\n * alias this function, so we have to use a small shim that has the same\n * behavior when not compiling.\n */\nwindow.JSCompiler_renameProperty =\n    (prop, _obj) => prop;\nexport const defaultConverter = {\n    toAttribute(value, type) {\n        switch (type) {\n            case Boolean:\n                return value ? '' : null;\n            case Object:\n            case Array:\n                // if the value is `null` or `undefined` pass this through\n                // to allow removing/no change behavior.\n                return value == null ? value : JSON.stringify(value);\n        }\n        return value;\n    },\n    fromAttribute(value, type) {\n        switch (type) {\n            case Boolean:\n                return value !== null;\n            case Number:\n                return value === null ? null : Number(value);\n            case Object:\n            case Array:\n                return JSON.parse(value);\n        }\n        return value;\n    }\n};\n/**\n * Change function that returns true if `value` is different from `oldValue`.\n * This method is used as the default for a property's `hasChanged` function.\n */\nexport const notEqual = (value, old) => {\n    // This ensures (old==NaN, value==NaN) always returns false\n    return old !== value && (old === old || value === value);\n};\nconst defaultPropertyDeclaration = {\n    attribute: true,\n    type: String,\n    converter: defaultConverter,\n    reflect: false,\n    hasChanged: notEqual\n};\nconst microtaskPromise = Promise.resolve(true);\nconst STATE_HAS_UPDATED = 1;\nconst STATE_UPDATE_REQUESTED = 1 << 2;\nconst STATE_IS_REFLECTING_TO_ATTRIBUTE = 1 << 3;\nconst STATE_IS_REFLECTING_TO_PROPERTY = 1 << 4;\nconst STATE_HAS_CONNECTED = 1 << 5;\n/**\n * The Closure JS Compiler doesn't currently have good support for static\n * property semantics where \"this\" is dynamic (e.g.\n * https://github.com/google/closure-compiler/issues/3177 and others) so we use\n * this hack to bypass any rewriting by the compiler.\n */\nconst finalized = 'finalized';\n/**\n * Base element class which manages element properties and attributes. When\n * properties change, the `update` method is asynchronously called. This method\n * should be supplied by subclassers to render updates as desired.\n */\nexport class UpdatingElement extends HTMLElement {\n    constructor() {\n        super();\n        this._updateState = 0;\n        this._instanceProperties = undefined;\n        this._updatePromise = microtaskPromise;\n        this._hasConnectedResolver = undefined;\n        /**\n         * Map with keys for any properties that have changed since the last\n         * update cycle with previous values.\n         */\n        this._changedProperties = new Map();\n        /**\n         * Map with keys of properties that should be reflected when updated.\n         */\n        this._reflectingProperties = undefined;\n        this.initialize();\n    }\n    /**\n     * Returns a list of attributes corresponding to the registered properties.\n     * @nocollapse\n     */\n    static get observedAttributes() {\n        // note: piggy backing on this to ensure we're finalized.\n        this.finalize();\n        const attributes = [];\n        // Use forEach so this works even if for/of loops are compiled to for loops\n        // expecting arrays\n        this._classProperties.forEach((v, p) => {\n            const attr = this._attributeNameForProperty(p, v);\n            if (attr !== undefined) {\n                this._attributeToPropertyMap.set(attr, p);\n                attributes.push(attr);\n            }\n        });\n        return attributes;\n    }\n    /**\n     * Ensures the private `_classProperties` property metadata is created.\n     * In addition to `finalize` this is also called in `createProperty` to\n     * ensure the `@property` decorator can add property metadata.\n     */\n    /** @nocollapse */\n    static _ensureClassProperties() {\n        // ensure private storage for property declarations.\n        if (!this.hasOwnProperty(JSCompiler_renameProperty('_classProperties', this))) {\n            this._classProperties = new Map();\n            // NOTE: Workaround IE11 not supporting Map constructor argument.\n            const superProperties = Object.getPrototypeOf(this)._classProperties;\n            if (superProperties !== undefined) {\n                superProperties.forEach((v, k) => this._classProperties.set(k, v));\n            }\n        }\n    }\n    /**\n     * Creates a property accessor on the element prototype if one does not exist.\n     * The property setter calls the property's `hasChanged` property option\n     * or uses a strict identity check to determine whether or not to request\n     * an update.\n     * @nocollapse\n     */\n    static createProperty(name, options = defaultPropertyDeclaration) {\n        // Note, since this can be called by the `@property` decorator which\n        // is called before `finalize`, we ensure storage exists for property\n        // metadata.\n        this._ensureClassProperties();\n        this._classProperties.set(name, options);\n        // Do not generate an accessor if the prototype already has one, since\n        // it would be lost otherwise and that would never be the user's intention;\n        // Instead, we expect users to call `requestUpdate` themselves from\n        // user-defined accessors. Note that if the super has an accessor we will\n        // still overwrite it\n        if (options.noAccessor || this.prototype.hasOwnProperty(name)) {\n            return;\n        }\n        const key = typeof name === 'symbol' ? Symbol() : `__${name}`;\n        Object.defineProperty(this.prototype, name, {\n            // tslint:disable-next-line:no-any no symbol in index\n            get() {\n                return this[key];\n            },\n            set(value) {\n                const oldValue = this[name];\n                this[key] = value;\n                this._requestUpdate(name, oldValue);\n            },\n            configurable: true,\n            enumerable: true\n        });\n    }\n    /**\n     * Creates property accessors for registered properties and ensures\n     * any superclasses are also finalized.\n     * @nocollapse\n     */\n    static finalize() {\n        // finalize any superclasses\n        const superCtor = Object.getPrototypeOf(this);\n        if (!superCtor.hasOwnProperty(finalized)) {\n            superCtor.finalize();\n        }\n        this[finalized] = true;\n        this._ensureClassProperties();\n        // initialize Map populated in observedAttributes\n        this._attributeToPropertyMap = new Map();\n        // make any properties\n        // Note, only process \"own\" properties since this element will inherit\n        // any properties defined on the superClass, and finalization ensures\n        // the entire prototype chain is finalized.\n        if (this.hasOwnProperty(JSCompiler_renameProperty('properties', this))) {\n            const props = this.properties;\n            // support symbols in properties (IE11 does not support this)\n            const propKeys = [\n                ...Object.getOwnPropertyNames(props),\n                ...(typeof Object.getOwnPropertySymbols === 'function') ?\n                    Object.getOwnPropertySymbols(props) :\n                    []\n            ];\n            // This for/of is ok because propKeys is an array\n            for (const p of propKeys) {\n                // note, use of `any` is due to TypeSript lack of support for symbol in\n                // index types\n                // tslint:disable-next-line:no-any no symbol in index\n                this.createProperty(p, props[p]);\n            }\n        }\n    }\n    /**\n     * Returns the property name for the given attribute `name`.\n     * @nocollapse\n     */\n    static _attributeNameForProperty(name, options) {\n        const attribute = options.attribute;\n        return attribute === false ?\n            undefined :\n            (typeof attribute === 'string' ?\n                attribute :\n                (typeof name === 'string' ? name.toLowerCase() : undefined));\n    }\n    /**\n     * Returns true if a property should request an update.\n     * Called when a property value is set and uses the `hasChanged`\n     * option for the property if present or a strict identity check.\n     * @nocollapse\n     */\n    static _valueHasChanged(value, old, hasChanged = notEqual) {\n        return hasChanged(value, old);\n    }\n    /**\n     * Returns the property value for the given attribute value.\n     * Called via the `attributeChangedCallback` and uses the property's\n     * `converter` or `converter.fromAttribute` property option.\n     * @nocollapse\n     */\n    static _propertyValueFromAttribute(value, options) {\n        const type = options.type;\n        const converter = options.converter || defaultConverter;\n        const fromAttribute = (typeof converter === 'function' ? converter : converter.fromAttribute);\n        return fromAttribute ? fromAttribute(value, type) : value;\n    }\n    /**\n     * Returns the attribute value for the given property value. If this\n     * returns undefined, the property will *not* be reflected to an attribute.\n     * If this returns null, the attribute will be removed, otherwise the\n     * attribute will be set to the value.\n     * This uses the property's `reflect` and `type.toAttribute` property options.\n     * @nocollapse\n     */\n    static _propertyValueToAttribute(value, options) {\n        if (options.reflect === undefined) {\n            return;\n        }\n        const type = options.type;\n        const converter = options.converter;\n        const toAttribute = converter && converter.toAttribute ||\n            defaultConverter.toAttribute;\n        return toAttribute(value, type);\n    }\n    /**\n     * Performs element initialization. By default captures any pre-set values for\n     * registered properties.\n     */\n    initialize() {\n        this._saveInstanceProperties();\n        // ensures first update will be caught by an early access of\n        // `updateComplete`\n        this._requestUpdate();\n    }\n    /**\n     * Fixes any properties set on the instance before upgrade time.\n     * Otherwise these would shadow the accessor and break these properties.\n     * The properties are stored in a Map which is played back after the\n     * constructor runs. Note, on very old versions of Safari (<=9) or Chrome\n     * (<=41), properties created for native platform properties like (`id` or\n     * `name`) may not have default values set in the element constructor. On\n     * these browsers native properties appear on instances and therefore their\n     * default value will overwrite any element default (e.g. if the element sets\n     * this.id = 'id' in the constructor, the 'id' will become '' since this is\n     * the native platform default).\n     */\n    _saveInstanceProperties() {\n        // Use forEach so this works even if for/of loops are compiled to for loops\n        // expecting arrays\n        this.constructor\n            ._classProperties.forEach((_v, p) => {\n            if (this.hasOwnProperty(p)) {\n                const value = this[p];\n                delete this[p];\n                if (!this._instanceProperties) {\n                    this._instanceProperties = new Map();\n                }\n                this._instanceProperties.set(p, value);\n            }\n        });\n    }\n    /**\n     * Applies previously saved instance properties.\n     */\n    _applyInstanceProperties() {\n        // Use forEach so this works even if for/of loops are compiled to for loops\n        // expecting arrays\n        // tslint:disable-next-line:no-any\n        this._instanceProperties.forEach((v, p) => this[p] = v);\n        this._instanceProperties = undefined;\n    }\n    connectedCallback() {\n        this._updateState = this._updateState | STATE_HAS_CONNECTED;\n        // Ensure first connection completes an update. Updates cannot complete\n        // before connection and if one is pending connection the\n        // `_hasConnectionResolver` will exist. If so, resolve it to complete the\n        // update, otherwise requestUpdate.\n        if (this._hasConnectedResolver) {\n            this._hasConnectedResolver();\n            this._hasConnectedResolver = undefined;\n        }\n    }\n    /**\n     * Allows for `super.disconnectedCallback()` in extensions while\n     * reserving the possibility of making non-breaking feature additions\n     * when disconnecting at some point in the future.\n     */\n    disconnectedCallback() {\n    }\n    /**\n     * Synchronizes property values when attributes change.\n     */\n    attributeChangedCallback(name, old, value) {\n        if (old !== value) {\n            this._attributeToProperty(name, value);\n        }\n    }\n    _propertyToAttribute(name, value, options = defaultPropertyDeclaration) {\n        const ctor = this.constructor;\n        const attr = ctor._attributeNameForProperty(name, options);\n        if (attr !== undefined) {\n            const attrValue = ctor._propertyValueToAttribute(value, options);\n            // an undefined value does not change the attribute.\n            if (attrValue === undefined) {\n                return;\n            }\n            // Track if the property is being reflected to avoid\n            // setting the property again via `attributeChangedCallback`. Note:\n            // 1. this takes advantage of the fact that the callback is synchronous.\n            // 2. will behave incorrectly if multiple attributes are in the reaction\n            // stack at time of calling. However, since we process attributes\n            // in `update` this should not be possible (or an extreme corner case\n            // that we'd like to discover).\n            // mark state reflecting\n            this._updateState = this._updateState | STATE_IS_REFLECTING_TO_ATTRIBUTE;\n            if (attrValue == null) {\n                this.removeAttribute(attr);\n            }\n            else {\n                this.setAttribute(attr, attrValue);\n            }\n            // mark state not reflecting\n            this._updateState = this._updateState & ~STATE_IS_REFLECTING_TO_ATTRIBUTE;\n        }\n    }\n    _attributeToProperty(name, value) {\n        // Use tracking info to avoid deserializing attribute value if it was\n        // just set from a property setter.\n        if (this._updateState & STATE_IS_REFLECTING_TO_ATTRIBUTE) {\n            return;\n        }\n        const ctor = this.constructor;\n        const propName = ctor._attributeToPropertyMap.get(name);\n        if (propName !== undefined) {\n            const options = ctor._classProperties.get(propName) || defaultPropertyDeclaration;\n            // mark state reflecting\n            this._updateState = this._updateState | STATE_IS_REFLECTING_TO_PROPERTY;\n            this[propName] =\n                // tslint:disable-next-line:no-any\n                ctor._propertyValueFromAttribute(value, options);\n            // mark state not reflecting\n            this._updateState = this._updateState & ~STATE_IS_REFLECTING_TO_PROPERTY;\n        }\n    }\n    /**\n     * This private version of `requestUpdate` does not access or return the\n     * `updateComplete` promise. This promise can be overridden and is therefore\n     * not free to access.\n     */\n    _requestUpdate(name, oldValue) {\n        let shouldRequestUpdate = true;\n        // If we have a property key, perform property update steps.\n        if (name !== undefined) {\n            const ctor = this.constructor;\n            const options = ctor._classProperties.get(name) || defaultPropertyDeclaration;\n            if (ctor._valueHasChanged(this[name], oldValue, options.hasChanged)) {\n                if (!this._changedProperties.has(name)) {\n                    this._changedProperties.set(name, oldValue);\n                }\n                // Add to reflecting properties set.\n                // Note, it's important that every change has a chance to add the\n                // property to `_reflectingProperties`. This ensures setting\n                // attribute + property reflects correctly.\n                if (options.reflect === true &&\n                    !(this._updateState & STATE_IS_REFLECTING_TO_PROPERTY)) {\n                    if (this._reflectingProperties === undefined) {\n                        this._reflectingProperties = new Map();\n                    }\n                    this._reflectingProperties.set(name, options);\n                }\n            }\n            else {\n                // Abort the request if the property should not be considered changed.\n                shouldRequestUpdate = false;\n            }\n        }\n        if (!this._hasRequestedUpdate && shouldRequestUpdate) {\n            this._enqueueUpdate();\n        }\n    }\n    /**\n     * Requests an update which is processed asynchronously. This should\n     * be called when an element should update based on some state not triggered\n     * by setting a property. In this case, pass no arguments. It should also be\n     * called when manually implementing a property setter. In this case, pass the\n     * property `name` and `oldValue` to ensure that any configured property\n     * options are honored. Returns the `updateComplete` Promise which is resolved\n     * when the update completes.\n     *\n     * @param name {PropertyKey} (optional) name of requesting property\n     * @param oldValue {any} (optional) old value of requesting property\n     * @returns {Promise} A Promise that is resolved when the update completes.\n     */\n    requestUpdate(name, oldValue) {\n        this._requestUpdate(name, oldValue);\n        return this.updateComplete;\n    }\n    /**\n     * Sets up the element to asynchronously update.\n     */\n    async _enqueueUpdate() {\n        // Mark state updating...\n        this._updateState = this._updateState | STATE_UPDATE_REQUESTED;\n        let resolve;\n        let reject;\n        const previousUpdatePromise = this._updatePromise;\n        this._updatePromise = new Promise((res, rej) => {\n            resolve = res;\n            reject = rej;\n        });\n        try {\n            // Ensure any previous update has resolved before updating.\n            // This `await` also ensures that property changes are batched.\n            await previousUpdatePromise;\n        }\n        catch (e) {\n            // Ignore any previous errors. We only care that the previous cycle is\n            // done. Any error should have been handled in the previous update.\n        }\n        // Make sure the element has connected before updating.\n        if (!this._hasConnected) {\n            await new Promise((res) => this._hasConnectedResolver = res);\n        }\n        try {\n            const result = this.performUpdate();\n            // If `performUpdate` returns a Promise, we await it. This is done to\n            // enable coordinating updates with a scheduler. Note, the result is\n            // checked to avoid delaying an additional microtask unless we need to.\n            if (result != null) {\n                await result;\n            }\n        }\n        catch (e) {\n            reject(e);\n        }\n        resolve(!this._hasRequestedUpdate);\n    }\n    get _hasConnected() {\n        return (this._updateState & STATE_HAS_CONNECTED);\n    }\n    get _hasRequestedUpdate() {\n        return (this._updateState & STATE_UPDATE_REQUESTED);\n    }\n    get hasUpdated() {\n        return (this._updateState & STATE_HAS_UPDATED);\n    }\n    /**\n     * Performs an element update. Note, if an exception is thrown during the\n     * update, `firstUpdated` and `updated` will not be called.\n     *\n     * You can override this method to change the timing of updates. If this\n     * method is overridden, `super.performUpdate()` must be called.\n     *\n     * For instance, to schedule updates to occur just before the next frame:\n     *\n     * ```\n     * protected async performUpdate(): Promise<unknown> {\n     *   await new Promise((resolve) => requestAnimationFrame(() => resolve()));\n     *   super.performUpdate();\n     * }\n     * ```\n     */\n    performUpdate() {\n        // Mixin instance properties once, if they exist.\n        if (this._instanceProperties) {\n            this._applyInstanceProperties();\n        }\n        let shouldUpdate = false;\n        const changedProperties = this._changedProperties;\n        try {\n            shouldUpdate = this.shouldUpdate(changedProperties);\n            if (shouldUpdate) {\n                this.update(changedProperties);\n            }\n        }\n        catch (e) {\n            // Prevent `firstUpdated` and `updated` from running when there's an\n            // update exception.\n            shouldUpdate = false;\n            throw e;\n        }\n        finally {\n            // Ensure element can accept additional updates after an exception.\n            this._markUpdated();\n        }\n        if (shouldUpdate) {\n            if (!(this._updateState & STATE_HAS_UPDATED)) {\n                this._updateState = this._updateState | STATE_HAS_UPDATED;\n                this.firstUpdated(changedProperties);\n            }\n            this.updated(changedProperties);\n        }\n    }\n    _markUpdated() {\n        this._changedProperties = new Map();\n        this._updateState = this._updateState & ~STATE_UPDATE_REQUESTED;\n    }\n    /**\n     * Returns a Promise that resolves when the element has completed updating.\n     * The Promise value is a boolean that is `true` if the element completed the\n     * update without triggering another update. The Promise result is `false` if\n     * a property was set inside `updated()`. If the Promise is rejected, an\n     * exception was thrown during the update.\n     *\n     * To await additional asynchronous work, override the `_getUpdateComplete`\n     * method. For example, it is sometimes useful to await a rendered element\n     * before fulfilling this Promise. To do this, first await\n     * `super._getUpdateComplete()`, then any subsequent state.\n     *\n     * @returns {Promise} The Promise returns a boolean that indicates if the\n     * update resolved without triggering another update.\n     */\n    get updateComplete() {\n        return this._getUpdateComplete();\n    }\n    /**\n     * Override point for the `updateComplete` promise.\n     *\n     * It is not safe to override the `updateComplete` getter directly due to a\n     * limitation in TypeScript which means it is not possible to call a\n     * superclass getter (e.g. `super.updateComplete.then(...)`) when the target\n     * language is ES5 (https://github.com/microsoft/TypeScript/issues/338).\n     * This method should be overridden instead. For example:\n     *\n     *   class MyElement extends LitElement {\n     *     async _getUpdateComplete() {\n     *       await super._getUpdateComplete();\n     *       await this._myChild.updateComplete;\n     *     }\n     *   }\n     */\n    _getUpdateComplete() {\n        return this._updatePromise;\n    }\n    /**\n     * Controls whether or not `update` should be called when the element requests\n     * an update. By default, this method always returns `true`, but this can be\n     * customized to control when to update.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    shouldUpdate(_changedProperties) {\n        return true;\n    }\n    /**\n     * Updates the element. This method reflects property values to attributes.\n     * It can be overridden to render and keep updated element DOM.\n     * Setting properties inside this method will *not* trigger\n     * another update.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    update(_changedProperties) {\n        if (this._reflectingProperties !== undefined &&\n            this._reflectingProperties.size > 0) {\n            // Use forEach so this works even if for/of loops are compiled to for\n            // loops expecting arrays\n            this._reflectingProperties.forEach((v, k) => this._propertyToAttribute(k, this[k], v));\n            this._reflectingProperties = undefined;\n        }\n    }\n    /**\n     * Invoked whenever the element is updated. Implement to perform\n     * post-updating tasks via DOM APIs, for example, focusing an element.\n     *\n     * Setting properties inside this method will trigger the element to update\n     * again after this update cycle completes.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    updated(_changedProperties) {\n    }\n    /**\n     * Invoked when the element is first updated. Implement to perform one time\n     * work on the element after update.\n     *\n     * Setting properties inside this method will trigger the element to update\n     * again after this update cycle completes.\n     *\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    firstUpdated(_changedProperties) {\n    }\n}\n_a = finalized;\n/**\n * Marks class as having finished creating properties.\n */\nUpdatingElement[_a] = true;\n//# sourceMappingURL=updating-element.js.map","/**\n@license\nCopyright (c) 2019 The Polymer Project Authors. All rights reserved.\nThis code may only be used under the BSD style license found at\nhttp://polymer.github.io/LICENSE.txt The complete set of authors may be found at\nhttp://polymer.github.io/AUTHORS.txt The complete set of contributors may be\nfound at http://polymer.github.io/CONTRIBUTORS.txt Code distributed by Google as\npart of the polymer project is also subject to an additional IP rights grant\nfound at http://polymer.github.io/PATENTS.txt\n*/\nexport const supportsAdoptingStyleSheets = ('adoptedStyleSheets' in Document.prototype) &&\n    ('replace' in CSSStyleSheet.prototype);\nconst constructionToken = Symbol();\nexport class CSSResult {\n    constructor(cssText, safeToken) {\n        if (safeToken !== constructionToken) {\n            throw new Error('CSSResult is not constructable. Use `unsafeCSS` or `css` instead.');\n        }\n        this.cssText = cssText;\n    }\n    // Note, this is a getter so that it's lazy. In practice, this means\n    // stylesheets are not created until the first element instance is made.\n    get styleSheet() {\n        if (this._styleSheet === undefined) {\n            // Note, if `adoptedStyleSheets` is supported then we assume CSSStyleSheet\n            // is constructable.\n            if (supportsAdoptingStyleSheets) {\n                this._styleSheet = new CSSStyleSheet();\n                this._styleSheet.replaceSync(this.cssText);\n            }\n            else {\n                this._styleSheet = null;\n            }\n        }\n        return this._styleSheet;\n    }\n    toString() {\n        return this.cssText;\n    }\n}\n/**\n * Wrap a value for interpolation in a css tagged template literal.\n *\n * This is unsafe because untrusted CSS text can be used to phone home\n * or exfiltrate data to an attacker controlled site. Take care to only use\n * this with trusted input.\n */\nexport const unsafeCSS = (value) => {\n    return new CSSResult(String(value), constructionToken);\n};\nconst textFromCSSResult = (value) => {\n    if (value instanceof CSSResult) {\n        return value.cssText;\n    }\n    else if (typeof value === 'number') {\n        return value;\n    }\n    else {\n        throw new Error(`Value passed to 'css' function must be a 'css' function result: ${value}. Use 'unsafeCSS' to pass non-literal values, but\n            take care to ensure page security.`);\n    }\n};\n/**\n * Template tag which which can be used with LitElement's `style` property to\n * set element styles. For security reasons, only literal string values may be\n * used. To incorporate non-literal values `unsafeCSS` may be used inside a\n * template string part.\n */\nexport const css = (strings, ...values) => {\n    const cssText = values.reduce((acc, v, idx) => acc + textFromCSSResult(v) + strings[idx + 1], strings[0]);\n    return new CSSResult(cssText, constructionToken);\n};\n//# sourceMappingURL=css-tag.js.map","/**\n * @license\n * Copyright (c) 2017 The Polymer Project Authors. All rights reserved.\n * This code may only be used under the BSD style license found at\n * http://polymer.github.io/LICENSE.txt\n * The complete set of authors may be found at\n * http://polymer.github.io/AUTHORS.txt\n * The complete set of contributors may be found at\n * http://polymer.github.io/CONTRIBUTORS.txt\n * Code distributed by Google as part of the polymer project is also\n * subject to an additional IP rights grant found at\n * http://polymer.github.io/PATENTS.txt\n */\nimport { TemplateResult } from 'lit-html';\nimport { render } from 'lit-html/lib/shady-render.js';\nimport { UpdatingElement } from './lib/updating-element.js';\nexport * from './lib/updating-element.js';\nexport * from './lib/decorators.js';\nexport { html, svg, TemplateResult, SVGTemplateResult } from 'lit-html/lit-html.js';\nimport { supportsAdoptingStyleSheets } from './lib/css-tag.js';\nexport * from './lib/css-tag.js';\n// IMPORTANT: do not change the property name or the assignment expression.\n// This line will be used in regexes to search for LitElement usage.\n// TODO(justinfagnani): inject version number at build time\n(window['litElementVersions'] || (window['litElementVersions'] = []))\n    .push('2.2.1');\n/**\n * Minimal implementation of Array.prototype.flat\n * @param arr the array to flatten\n * @param result the accumlated result\n */\nfunction arrayFlat(styles, result = []) {\n    for (let i = 0, length = styles.length; i < length; i++) {\n        const value = styles[i];\n        if (Array.isArray(value)) {\n            arrayFlat(value, result);\n        }\n        else {\n            result.push(value);\n        }\n    }\n    return result;\n}\n/** Deeply flattens styles array. Uses native flat if available. */\nconst flattenStyles = (styles) => styles.flat ? styles.flat(Infinity) : arrayFlat(styles);\nexport class LitElement extends UpdatingElement {\n    /** @nocollapse */\n    static finalize() {\n        // The Closure JS Compiler does not always preserve the correct \"this\"\n        // when calling static super methods (b/137460243), so explicitly bind.\n        super.finalize.call(this);\n        // Prepare styling that is stamped at first render time. Styling\n        // is built from user provided `styles` or is inherited from the superclass.\n        this._styles =\n            this.hasOwnProperty(JSCompiler_renameProperty('styles', this)) ?\n                this._getUniqueStyles() :\n                this._styles || [];\n    }\n    /** @nocollapse */\n    static _getUniqueStyles() {\n        // Take care not to call `this.styles` multiple times since this generates\n        // new CSSResults each time.\n        // TODO(sorvell): Since we do not cache CSSResults by input, any\n        // shared styles will generate new stylesheet objects, which is wasteful.\n        // This should be addressed when a browser ships constructable\n        // stylesheets.\n        const userStyles = this.styles;\n        const styles = [];\n        if (Array.isArray(userStyles)) {\n            const flatStyles = flattenStyles(userStyles);\n            // As a performance optimization to avoid duplicated styling that can\n            // occur especially when composing via subclassing, de-duplicate styles\n            // preserving the last item in the list. The last item is kept to\n            // try to preserve cascade order with the assumption that it's most\n            // important that last added styles override previous styles.\n            const styleSet = flatStyles.reduceRight((set, s) => {\n                set.add(s);\n                // on IE set.add does not return the set.\n                return set;\n            }, new Set());\n            // Array.from does not work on Set in IE\n            styleSet.forEach((v) => styles.unshift(v));\n        }\n        else if (userStyles) {\n            styles.push(userStyles);\n        }\n        return styles;\n    }\n    /**\n     * Performs element initialization. By default this calls `createRenderRoot`\n     * to create the element `renderRoot` node and captures any pre-set values for\n     * registered properties.\n     */\n    initialize() {\n        super.initialize();\n        this.renderRoot =\n            this.createRenderRoot();\n        // Note, if renderRoot is not a shadowRoot, styles would/could apply to the\n        // element's getRootNode(). While this could be done, we're choosing not to\n        // support this now since it would require different logic around de-duping.\n        if (window.ShadowRoot && this.renderRoot instanceof window.ShadowRoot) {\n            this.adoptStyles();\n        }\n    }\n    /**\n     * Returns the node into which the element should render and by default\n     * creates and returns an open shadowRoot. Implement to customize where the\n     * element's DOM is rendered. For example, to render into the element's\n     * childNodes, return `this`.\n     * @returns {Element|DocumentFragment} Returns a node into which to render.\n     */\n    createRenderRoot() {\n        return this.attachShadow({ mode: 'open' });\n    }\n    /**\n     * Applies styling to the element shadowRoot using the `static get styles`\n     * property. Styling will apply using `shadowRoot.adoptedStyleSheets` where\n     * available and will fallback otherwise. When Shadow DOM is polyfilled,\n     * ShadyCSS scopes styles and adds them to the document. When Shadow DOM\n     * is available but `adoptedStyleSheets` is not, styles are appended to the\n     * end of the `shadowRoot` to [mimic spec\n     * behavior](https://wicg.github.io/construct-stylesheets/#using-constructed-stylesheets).\n     */\n    adoptStyles() {\n        const styles = this.constructor._styles;\n        if (styles.length === 0) {\n            return;\n        }\n        // There are three separate cases here based on Shadow DOM support.\n        // (1) shadowRoot polyfilled: use ShadyCSS\n        // (2) shadowRoot.adoptedStyleSheets available: use it.\n        // (3) shadowRoot.adoptedStyleSheets polyfilled: append styles after\n        // rendering\n        if (window.ShadyCSS !== undefined && !window.ShadyCSS.nativeShadow) {\n            window.ShadyCSS.ScopingShim.prepareAdoptedCssText(styles.map((s) => s.cssText), this.localName);\n        }\n        else if (supportsAdoptingStyleSheets) {\n            this.renderRoot.adoptedStyleSheets =\n                styles.map((s) => s.styleSheet);\n        }\n        else {\n            // This must be done after rendering so the actual style insertion is done\n            // in `update`.\n            this._needsShimAdoptedStyleSheets = true;\n        }\n    }\n    connectedCallback() {\n        super.connectedCallback();\n        // Note, first update/render handles styleElement so we only call this if\n        // connected after first update.\n        if (this.hasUpdated && window.ShadyCSS !== undefined) {\n            window.ShadyCSS.styleElement(this);\n        }\n    }\n    /**\n     * Updates the element. This method reflects property values to attributes\n     * and calls `render` to render DOM via lit-html. Setting properties inside\n     * this method will *not* trigger another update.\n     * * @param _changedProperties Map of changed properties with old values\n     */\n    update(changedProperties) {\n        super.update(changedProperties);\n        const templateResult = this.render();\n        if (templateResult instanceof TemplateResult) {\n            this.constructor\n                .render(templateResult, this.renderRoot, { scopeName: this.localName, eventContext: this });\n        }\n        // When native Shadow DOM is used but adoptedStyles are not supported,\n        // insert styling after rendering to ensure adoptedStyles have highest\n        // priority.\n        if (this._needsShimAdoptedStyleSheets) {\n            this._needsShimAdoptedStyleSheets = false;\n            this.constructor._styles.forEach((s) => {\n                const style = document.createElement('style');\n                style.textContent = s.cssText;\n                this.renderRoot.appendChild(style);\n            });\n        }\n    }\n    /**\n     * Invoked on each update to perform rendering tasks. This method must return\n     * a lit-html TemplateResult. Setting properties inside this method will *not*\n     * trigger the element to update.\n     */\n    render() {\n    }\n}\n/**\n * Ensure this class is marked as `finalized` as an optimization ensuring\n * it will not needlessly try to `finalize`.\n *\n * Note this property name is a string to prevent breaking Closure JS Compiler\n * optimizations. See updating-element.ts for more information.\n */\nLitElement['finalized'] = true;\n/**\n * Render method used to render the lit-html TemplateResult to the element's\n * DOM.\n * @param {TemplateResult} Template to render.\n * @param {Element|DocumentFragment} Node into which to render.\n * @param {String} Element name.\n * @nocollapse\n */\nLitElement.render = render;\n//# sourceMappingURL=lit-element.js.map","import {\n    html\n} from 'lit-element';\n\nconst componentHTML = (...properties) => {\n        const [option, src, type, txtError, formats, poster, intervalReproduction, track, preload, autoplay] = properties;\n        let template = null;\n        if(option === 'simple'){\n          template =  html`\n            <video\n               id=\"video\"\n               src=${src + intervalReproduction}\n               type=${type} \n               poster=${poster} \n               preload=${preload}\n               autoplay=${autoplay}\n               controls>\n               <track \n                   src=${track.src}\n                   label=${track.label}\n                   kind=${track.kind} \n                   srclang=${track.srclang} \n                   default>\n              <p>${txtError}</p>\n            </video>`\n\n        }else if(option === 'complex'){\n\n          template =  html`\n          <video \n            id=\"video\"\n            poster=${poster} \n            preload=${preload}\n            autoplay=${autoplay}\n            controls> \n          ${formats.map(video => html`\n           <source src=${video.src} type=${video.type}> \n          `)}\n          <track \n                    src=${track.src}\n                    label=${track.label}\n                    kind=${track.kind} \n                    srclang=${track.srclang} \n                    default>\n        <p>${txtError}</p>\n      </video>\n          `\n\n        }\n\n    return html `\n    <div class=\"container\">\n        <div class=\"video\">\n          ${template}\n        </div>\n    </div>\n    `;     \n}\n\nexport default componentHTML;","import { css } from 'lit-element';\n\n\nconst stylesComponent = () => {\n\n    return css `\n:host{\n  }\n\n  .video {\n\tdisplay: grid;\n\tgrid-template-columns: repeat(16, 1fr);\n\tgrid-template-rows: repeat(9, 1fr);\n\tposition: relative;\n}\n\n.video::before {\n\tcontent: \"\";\n\tdisplay: block;\n\tpadding-bottom: 100%;\n}\n\n.video > iframe,\n  .video > video {\n\tposition: absolute;\n\twidth: 100%;\n\theight: 100%;\n}\n\n.container {\n\twidth: 75%;\n\tmax-width: 960px;\n\tmin-width: 320px;\n\tmargin-left: auto;\n\tmargin-right: auto;\n}\n\n`\n}\nexport default stylesComponent;","import { LitElement } from 'lit-element';\nimport componentHTML from './lit-video-html';\nimport stylesComponent from './lit-video-styles';\n\n\nclass LitVideo extends LitElement {\n\n    constructor() {\n        super();\n        this.__initProperties();\n    }\n\n    static get properties() {\n        return {\n            option: { type: String },\n            src: { type: String },\n            type: { type: String },\n            txtError: { type: String },\n            formats: { type: Array },\n            poster: { type: String },\n            //#t=[start_time][,end_time]\n            intervalReproduction: { type: String },\n            track: { type: Object },\n            autoplay: { type: Boolean }\n        }\n    }\n\n    __initProperties() {\n        this.option = \"simple\";\n        this.src = \"\";\n        this.type = \"\";\n        this.txtError = \"default\";\n        this.formats = [];\n        this.poster = \"\";\n        this.intervalReproduction = \"\";\n        this.track = {};\n        this.preload = \"\";\n        this.autoplay = false;\n    }\n\n\n    static get styles() {\n        return stylesComponent();\n    }\n\n    render() {\n        return componentHTML(\n            this.option,\n            this.src,\n            this.type,\n            this.txtError,\n            this.formats,\n            this.poster,\n            this.intervalReproduction,\n            this.track,\n            this.preload,\n            this.autoplay);\n    }\n\n    _load() {\n        if(this.shadowRoot.querySelector('#video')){\n          this.shadowRoot.querySelector('#video').load();\n        }else{\n            return;\n        }\n    }\n\n    _play() {\n        if(this.shadowRoot.querySelector('#video')){\n          this.shadowRoot.querySelector('#video').play();\n        }else{\n            return;\n        }\n    }\n\n    _pause() {\n        if(this.shadowRoot.querySelector('#video')){\n          this.shadowRoot.querySelector('#video').pause();\n        }else{\n            return;\n        }\n    }\n\n}\n\ncustomElements.define('lit-video', LitVideo);"],"names":["render","litRender"],"mappings":"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"}