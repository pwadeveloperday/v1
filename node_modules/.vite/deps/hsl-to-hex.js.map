{
  "version": 3,
  "sources": ["../../hsl-to-rgb-for-reals/converter.js", "../../hsl-to-hex/index.js", "dep:hsl-to-hex"],
  "sourcesContent": ["// expected hue range: [0, 360)\n// expected saturation range: [0, 1]\n// expected lightness range: [0, 1]\nvar hslToRgb = function(hue, saturation, lightness){\n  // based on algorithm from http://en.wikipedia.org/wiki/HSL_and_HSV#Converting_to_RGB\n  if( hue == undefined ){\n    return [0, 0, 0];\n  }\n\n  var chroma = (1 - Math.abs((2 * lightness) - 1)) * saturation;\n  var huePrime = hue / 60;\n  var secondComponent = chroma * (1 - Math.abs((huePrime % 2) - 1));\n\n  huePrime = Math.floor(huePrime);\n  var red;\n  var green;\n  var blue;\n\n  if( huePrime === 0 ){\n    red = chroma;\n    green = secondComponent;\n    blue = 0;\n  }else if( huePrime === 1 ){\n    red = secondComponent;\n    green = chroma;\n    blue = 0;\n  }else if( huePrime === 2 ){\n    red = 0;\n    green = chroma;\n    blue = secondComponent;\n  }else if( huePrime === 3 ){\n    red = 0;\n    green = secondComponent;\n    blue = chroma;\n  }else if( huePrime === 4 ){\n    red = secondComponent;\n    green = 0;\n    blue = chroma;\n  }else if( huePrime === 5 ){\n    red = chroma;\n    green = 0;\n    blue = secondComponent;\n  }\n\n  var lightnessAdjustment = lightness - (chroma / 2);\n  red += lightnessAdjustment;\n  green += lightnessAdjustment;\n  blue += lightnessAdjustment;\n\n  return [\n      Math.abs(Math.round(red * 255)),\n      Math.abs(Math.round(green * 255)),\n      Math.abs(Math.round(blue * 255))\n  ];\n\n};\n\nmodule.exports = hslToRgb;\n", "// In our case, there's only one dependency\n\nvar toRgb = require('hsl-to-rgb-for-reals')\n\n// Typically all dependencies should be declared at the top of the file.\n\n// Now let's define an API for our module, we're taking hue, saturation and luminosity values and outputting a CSS compatible hex string.\n// Hue is in degrees, between 0 and 359. Since degrees a cyclical in nature, we'll support numbers greater than 359 or less than 0 by \"spinning\" them around until they fall within the 0 to 359 range.\n// Saturation and luminosity are both percentages, we'll represent these percentages with whole numbers between 0 and 100. For these numbers we'll need to enforce a maximum and a minimum, anything below 0 will become 0, anything above 100 will become 100.\n// Let's write some utility functions to handle this logic:\n\nfunction max (val, n) {\n  return (val > n) ? n : val\n}\n\nfunction min (val, n) {\n  return (val < n) ? n : val\n}\n\nfunction cycle (val) {\n  // for safety:\n  val = max(val, 1e7)\n  val = min(val, -1e7)\n  // cycle value:\n  while (val < 0) { val += 360 }\n  while (val > 359) { val -= 360 }\n  return val\n}\n\n// Now for the main piece, the `hsl` function:\n\nfunction hsl (hue, saturation, luminosity) {\n  // resolve degrees to 0 - 359 range\n  hue = cycle(hue)\n\n  // enforce constraints\n  saturation = min(max(saturation, 100), 0)\n  luminosity = min(max(luminosity, 100), 0)\n\n  // convert to 0 to 1 range used by hsl-to-rgb-for-reals\n  saturation /= 100\n  luminosity /= 100\n\n  // let hsl-to-rgb-for-reals do the hard work\n  var rgb = toRgb(hue, saturation, luminosity)\n\n  // convert each value in the returned RGB array\n  // to a 2 character hex value, join the array into\n  // a string, prefixed with a hash\n  return '#' + rgb\n    .map(function (n) {\n      return (256 + n).toString(16).substr(-2)\n    })\n    .join('')\n}\n\n// In order to make our code into a bona fide module we have to export it:\n\nmodule.exports = hsl\n", "export default require(\"./node_modules/hsl-to-hex/index.js\");"],
  "mappings": ";;;;;AAAA;AAAA;AAGA,QAAI,WAAW,SAAS,KAAK,YAAY,WAAU;AAEjD,UAAI,OAAO,QAAW;AACpB,eAAO,CAAC,GAAG,GAAG,CAAC;AAAA,MACjB;AAEA,UAAI,SAAU,KAAI,KAAK,IAAK,IAAI,YAAa,CAAC,KAAK;AACnD,UAAI,WAAW,MAAM;AACrB,UAAI,kBAAkB,SAAU,KAAI,KAAK,IAAK,WAAW,IAAK,CAAC;AAE/D,iBAAW,KAAK,MAAM,QAAQ;AAC9B,UAAI;AACJ,UAAI;AACJ,UAAI;AAEJ,UAAI,aAAa,GAAG;AAClB,cAAM;AACN,gBAAQ;AACR,eAAO;AAAA,MACT,WAAU,aAAa,GAAG;AACxB,cAAM;AACN,gBAAQ;AACR,eAAO;AAAA,MACT,WAAU,aAAa,GAAG;AACxB,cAAM;AACN,gBAAQ;AACR,eAAO;AAAA,MACT,WAAU,aAAa,GAAG;AACxB,cAAM;AACN,gBAAQ;AACR,eAAO;AAAA,MACT,WAAU,aAAa,GAAG;AACxB,cAAM;AACN,gBAAQ;AACR,eAAO;AAAA,MACT,WAAU,aAAa,GAAG;AACxB,cAAM;AACN,gBAAQ;AACR,eAAO;AAAA,MACT;AAEA,UAAI,sBAAsB,YAAa,SAAS;AAChD,aAAO;AACP,eAAS;AACT,cAAQ;AAER,aAAO;AAAA,QACH,KAAK,IAAI,KAAK,MAAM,MAAM,GAAG,CAAC;AAAA,QAC9B,KAAK,IAAI,KAAK,MAAM,QAAQ,GAAG,CAAC;AAAA,QAChC,KAAK,IAAI,KAAK,MAAM,OAAO,GAAG,CAAC;AAAA,MACnC;AAAA,IAEF;AAEA,WAAO,UAAU;AAAA;AAAA;;;ACzDjB;AAAA;AAEA,QAAI,QAAQ;AASZ,iBAAc,KAAK,GAAG;AACpB,aAAQ,MAAM,IAAK,IAAI;AAAA,IACzB;AAEA,iBAAc,KAAK,GAAG;AACpB,aAAQ,MAAM,IAAK,IAAI;AAAA,IACzB;AAEA,mBAAgB,KAAK;AAEnB,YAAM,IAAI,KAAK,GAAG;AAClB,YAAM,IAAI,KAAK,IAAI;AAEnB,aAAO,MAAM,GAAG;AAAE,eAAO;AAAA,MAAI;AAC7B,aAAO,MAAM,KAAK;AAAE,eAAO;AAAA,MAAI;AAC/B,aAAO;AAAA,IACT;AAIA,iBAAc,KAAK,YAAY,YAAY;AAEzC,YAAM,MAAM,GAAG;AAGf,mBAAa,IAAI,IAAI,YAAY,GAAG,GAAG,CAAC;AACxC,mBAAa,IAAI,IAAI,YAAY,GAAG,GAAG,CAAC;AAGxC,oBAAc;AACd,oBAAc;AAGd,UAAI,MAAM,MAAM,KAAK,YAAY,UAAU;AAK3C,aAAO,MAAM,IACV,IAAI,SAAU,GAAG;AAChB,eAAQ,OAAM,GAAG,SAAS,EAAE,EAAE,OAAO,EAAE;AAAA,MACzC,CAAC,EACA,KAAK,EAAE;AAAA,IACZ;AAIA,WAAO,UAAU;AAAA;AAAA;;;AC1DjB,IAAO,qBAAQ;",
  "names": []
}
